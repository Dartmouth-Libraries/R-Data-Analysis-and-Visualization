---
title: "Intro to GGplot Titanic"
author: "Jeremy Mikecz"
format: html
editor: visual
---

# *Analyzing a Disaster*: An intro to exploratory data visualization with R and ggplot

Jeremy Mikecz\
Research Data Services\
Dartmouth Libraries

Too often, researchers only begin to visualize their data at the end of the research process. They seek to create plots, graphs, and maps to share visual patterns of which they were already aware.

However, visualization should begin early in this process. As soon as you have assembled a workable dataset, create some plots and other visualizations to uncover patterns hidden in the dataset. **Exploratory data visualization** allows researchers to not only answer existing questions about their data but to also pose new questions altogether. <!--# insert more on EDA Viz -->

## 0. Setup

### *For Advanced Users (everyone else skip)*

For experienced users of R who regularly share their code with other researchers and experiment with others' code, we recommend setting up a separate **virtual environment** for each project. One way to do that in R is using the [**packrat**](https://rstudio.github.io/packrat/) package.

```{r}
## to install packrat: 
#install.packages("packrat")  

## setting up the packrat virtual environment in the current directory: 
#packrat::init()  
## turn packrat on 
#packrat::on
```

### 0.1. Install & Import Tidyverse

Tidyverse is a system of packages for data wrangling and analysis. It provides a different method and syntax for working with data tables (often called "data frames" in data science; but, tidyverse dataframes are known as "tibbles".) from base R. For more on tidyverse and tibbles see the **Intro to Tidyverse** notebook and the many resources listed in this notebook.

```{r}
## to install all packages included in tidyverse. #install.packages("tidyverse")    
## but we want to open ggplot2 with tidyverse: 

library(tidyverse)
```

### 0.2. The ggplot2 library

To create visualizations in R we will use the popular **ggplot** package.

To learn more about ggplot outside this lesson, see:

-   ggplot2 [cheat sheet](https://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf)

-   ggplot2 library [home page](https://ggplot2.tidyverse.org/) (with links to suggested tutorials / learning materials)

-   ggplot2 book: Wickham, [*ggplot2: Elegant Graphics for Data Analysis*](https://ggplot2-book.org/)(3rd edition).

-   Specific Visualization tutorials:

    -   ggplot2 cookbook: Chang, [*R Graphics Cookbook*](https://r-graphics.org/) *(2024).*

    -   [*R Graph Gallery*](https://r-graph-gallery.com/)

-   ggplot extensions: <https://exts.ggplot2.tidyverse.org/gallery/>

This lesson does not teach when to use what type of visualization. For more help on that see the *R Graph Gallery* site linked above.

We do not need to install or import ggplot because it is include with tidyverse. However, if you ever need to install or open ggplot separately use:

`{r} ##  #install.packages("ggplot2") #library(ggplot2)}`

### 0.3. Grammar of Graphics

The "gg" in ggplot stands for Grammar of Graphics. GGplot was developed by Hadley Wickham following the Grammar of Graphics model, which.... **\[explain more\]**

-   CU-Boulder Coursera course video on [Grammar of Graphics](https://www.youtube.com/watch?v=RCaFBJWXfZc)

-   Hadley Wickham, ["A Layered Grammar of Graphics"](https://vita.had.co.nz/papers/layered-grammar.html) in *Journal of Computational and Graphical Statistics* (2010).

-   [Cornell course guide](https://info5940.infosci.cornell.edu/notes/dataviz/grammar-of-graphics/)

-   Wickham, [*ggplot2: Elegant Graphics for Data Analysis*](https://ggplot2-book.org/)(3rd edition)

    -   especially Introduction and "The Grammar" chapters (Chapters 13-17)

## 1. Importing Data (preloaded datasets)

When conducting your own research, you will likely need to import your dataset into R and R Studio. Instructions for doing so are available in [Wickham, *R for Data Science*, Ch. 11](https://r4ds.had.co.nz/data-import.html).

However, when you are learning R, it is often easiest to experiment with their preloaded datasets. Fortunately, with the installation of the **tidyverse packages** we have access to dozens of "play" datasets. Let's take a quick look at what is available using the `data()` function:

```{r}
#data()
```

For this lesson we will use the **Titanic** dataset, which contains data about the passengers on the ill-fated **Titanic** ship that sunk in 1912.

We can begin by simply opening the **titanic dataset** by typing `Titanic`. However, let's first examine the available metadata for the dataset using the `help()` function:

```{r}
help(Titanic) 
#?Titanic    #does the same thing}
```

Metadata for this dataset should appear in the **Help pane** at the right-hand side of R Studio.

*A Note about functions: Functions in programming allow us to repeat common tasks. We can use "base R" functions available to all R programs (such as the help() function), use functions provided by packages (like the many functions included with the tidyverse packages), or create our own functions.*

*The common syntax for calling a function is:* `function_name(arguments)`. *We'll come back to that in a second.*...

First, let's view the dataset by typing in its name below:

```{r}
titanic = Titanic |>
    as_tibble()
titanic
```

How many observations (rows) are included in this dataset? What does each row represent?

How many data fields / variables (columns) for each?

## 2. Exploring a Dataset before visualization (with summary functions)

In R, we can run some basic functions to get a quick overview of a dataset. Run the following functions, analyzing what each does and what you can (and cannot) learn from each.

```         
head(dataset_name) 
class(dataset_name) 
dim(dataset_name) 
colnames(dataset_name) 
str(dataset_name) 
summary(dataset_name)
```

```{r}
head(titanic) 
# try "head(msleep, 3)" to see what that does differently}
```

```{r}
class(titanic)

```

```{r}

dim(titanic)
```

```{r}
colnames(titanic)
```

```{r}
str(titanic)
    
```

```{r}
summary(titanic)
```

## Exercise 1.

::: callout-tip
*Now that you know more about what is included in this dataset, do you have a particular hypothesis about what groups of passengers were most likely to survive the sinking of the Titanic?*
:::

```         
# hypothesis:
```

### 2.1 Numerical Data

One of the most useful ways to get summary data from a dataframe (or, in this case, a dplyr/tidyverse version of a dataframe known as a "tibble" - see *Intro to Tidyverse* notebook) is with the **summary() function**. Look at the results from the use of this function above. Then try to answer the following questions:

::: callout-tip
## Exercise 2.1

1.  What are the two main data types stored in this dataset?

2.  What are the maximum and minimum number (n) of passengers for all observations (rows)?
:::

### 2.2 Categorical Data

You may have noticed that while the **summary()** function returns valuable information for the columns with numerical data, it does not provide any information about the columns containing "character" data (in this case, also known as categorical data). From the **head()** and **str()** functions above, we do have an idea of some of the values found in each column. However, it would be valuable to know how many unique categories are found in these columns and how frequently they appear.

We can use the **distinct()** function to identify a list of unique values in the "genus" column. To apply it to one column of the dataset, let's practice using the piping syntax of tidyverse:

```         
dataset_name |>   
    function(column)
```

```{r}
titanic |>
    distinct(Class)
```

```{r}
titanic |>
    distinct(Class, Sex)
```

To generate a frequency count of the values found in a column we can use the function **count()**. To sort the results, we can also add the parameter `sort=TRUE`.

```{r}
titanic |>
    count(Class, sort=TRUE)
```

::: callout-tip
### Exercise 2.2.

Try applying these same summary functions to a different preloaded dataset to better understand the data it contains.
:::

```{r}


```

## 3. Tidyverse / dplyr verbs for Data Wrangling

To modify and "wrangle" datasets, the tidyverse commonly uses the following verbs / functions:

-   **select()**: to select specific columns by their names or data types

-   **arrange()**: to order rows by one or more columns

-   **rename()**: to rename columns

-   **mutate()**: to create columns

-   **filter()**: to filter out rows by a given condition

-   **distinct()**: to keep only distinct / unique rows

-   **gather()**: to make "wide" data longer

-   **spread()**: to make "long" data wider

-   **separate()**: to split a single column into multiple columns

-   **unite()**: to combine multiple columns into one

[More tidyverse verbs and functions here](https://dplyr.tidyverse.org/reference/index.html). Review the *Intro to Tidyverse* notebook for practice using some of these functions.

## 4. Visualizing Data Distributions

The package we will be using to visualize data in R is the popular `ggplot2` package, which has already been installed here as part of the **tidyverse** packages.

### 4.1. Grammar of Graphics

**What is the "Grammar of Graphics"?**

**Key Components of "Grammar of Graphics" plots**

Plot = Data + Mapping (how data variables are to be visualized)

Five mapping components:

| Component | Description |
|----|----|
| layer | includes **geoms** (geometric elements visible in the plot like points, lines, polygons, etc.) and **stats** (statistical transformations that summarize the data, simplifying it for visualization; i.e. binning or counting observations to make a histogram, or fitting a linear model) |
| scale | maps data values to visual variables like color, shape, and size |
| coord | describes how data will be placed spatially and what coordinate system will be used |
| facet | describes how to split data and display it in "small multiples" |
| theme | control stylistic choices such as font size and color palettes |

### 4.3. Bar Plots - Categorical Data

We can begin by creating some bar plots examining the distribution of data in this dataset.

First, let's quickly distinguish **histograms** from **bar plots / graphs / charts**. Although they look similar, histograms represent the distribution of numerical data (i.e. how many passengers were between 20 and 25 years old) whereas bar plots represent categorical data (i.e. how many passengers were female):

```{r}
ggplot(data=titanic, aes(x=Sex, y=n)) + 
    geom_bar(stat="identity")
```

```{r}
ggplot(data=titanic, aes(x=Age, y=n)) +
    geom_bar(stat="identity")

```

::: callout-tip
### Exercise 4.3.

1.  Try modifying one of the above bar graphs, transforming the bars from vertical to horizontal.
2.  Create a bar plot for a different data column / field not included above.
:::

```         
```

## Bar Plots 2: Compare Survival Rates

```{r}
ggplot(titanic, aes(x = Class, y = n, fill = Survived)) +
  geom_bar(stat = "identity", position = "fill") +
  facet_grid(Sex ~ Age) 
```

## Mosaic Plots

```{r}
# Calculate survival rates by Class and Sex
survival_rates <- titanic_summary %>%
  group_by(Class, Sex) %>%
  summarize(survival_rate = mean(survival_rate, na.rm=TRUE))

# Heatmap of survival rates
ggplot(survival_rates, aes(x = Class, y = Sex, fill = survival_rate)) +
  geom_tile()
```

## Calculate Survival Rate

At the moment, the dataset is grouped by sex, age (child or adult), passenger class, and survival. To help us identify the passengers most likely to survive, we first need to know how many people were in each demographic group (i.e. sex, age, class with survival excluded) and then calculate the percent of each group that survived.

```{r}
titanic_summary <- titanic |>
    group_by(Sex, Class, Age) |>
    summarize(total = sum(n))
```

```{r}
survivors <- titanic |>
    filter(Survived == "Yes") |>
    group_by(Sex, Age, Class) |>
    summarize(survived = sum(n))
```

```{r}
#titanic_summary <- left_join(titanic_summary, survivors, by = c("Sex", "Age", "Class")) 

titanic_summary <- titanic_summary |>
    left_join(survivors, by = c("Sex", "Age", "Class"))
```

```{r}
titanic_summary <- titanic_summary |>
  mutate(survival_rate = survived / total)
```

```{r}
titanic_summary <- titanic_summary |>
    arrange(survival_rate)
```

## problem - code below causes an error if run multiple times

solution: replace survived.y with survived.x

```{r}
#titanic_summary <- titanic_summary |>
    #left_join(survivors, by = c("Sex", "Age", "Class"))# |>
    #mutate(survival_rate = survived / total) |>
    #arrange(survival_rate)
```
