---
title: "r_geospatial"
format: html
editor: visual
---

```{r}
# insert > executable cell > R
#install.packages('gapminder')
library(gapminder)
#install.packages('tidyverse')
library(tidyverse)

library(gapminder)
library(ggplot2)
library(dplyr)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)

# Load gapminder dataset
data(gapminder)
head(gapminder)

```

spatial data science

```{r}
# Filter the gapminder dataset for the year 2007
gapminder_2007 <- gapminder::gapminder %>% filter(year == 2007)

# Get world map data
world <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf")

# NOTE: US, Denmark, etc not joining properly due to name conflicts

countries = rnaturalearth::ne_countries()

# Join gapminder data with world data
world_gdp <- world %>%
  left_join(gapminder_2007, by = c("name" = "country"))

# Plot GDP per capita
ggplot(data = world_gdp) +
  geom_sf(aes(fill = gdpPercap), color = "white") +
  scale_fill_viridis_c(option = "plasma", name = "GDP per Capita") +
  labs(title = "GDP per Capita by Country (2007)") +
  theme_minimal()
```

====

```{r}
library(gapminder)
library(dplyr)
library(ggplot2)
library(sf)
library(tidygeocoder)
library(tidyverse)

# Define a list of cities
cities <- data.frame(
  city = c("New York", "London", "Tokyo", "Beijing", "Rio de Janeiro", 
           "Sydney", "Cairo", "Mumbai", "Berlin"),
  stringsAsFactors = FALSE
)

# Geocode all cities using tidygeocoder
cities_with_coords <- cities %>%
  geocode(address = city, method = "osm", lat = latitude, long = longitude)

# Check the geocoded results
print(cities_with_coords)

# Get world map data
world <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf")

# Convert the cities_with_coords dataframe to sf format
cities_sf <- st_as_sf(cities_with_coords, coords = c("longitude", "latitude"), crs = 4326)

# Perform a spatial join to find which country each city belongs to
cities_with_country <- st_join(cities_sf, world, join = st_intersects)

# Extract coordinates
coords <- st_coordinates(cities_with_country)
           
head(cities_with_country)


```

```{r}
coordinates <- sf::st_coordinates(cities_with_country$geometry)

# Access the latitude (second element) of the first row
latitude <- coordinates[1, 2]

print(latitude)

longitude <- coordinates[1, 1]

print(longitude)

```

Heatmap of point data

```{r}

# Load libraries
library(sf)         # For handling simple features
library(ggplot2)    # For plotting
library(maps)       # To get map data

# Set working directory (adjust path if necessary)
setwd('~/Downloads')

# Load point data with latitude and longitude from CSV file
points <- read.csv('geocoded_eee_data_valid_lat_long.csv')

# Check the first few rows of the dataframe to view field names, numbers, etc 
head(points)

# Filter to make sure there are no NA values in lat/long columns (if needed)
points <- points[complete.cases(points[c('longitude', 'latitude')]), ]

# Convert the points data frame to a simple features object and set the CRS to EPSG 4326 (WGS 84)
points_sf <- sf::st_as_sf(points, coords = c('longitude', 'latitude'), crs = 4326)
head(points_sf)

# Create the base map of Massachusetts
massachusetts_map <- ggplot2::map_data("state", "massachusetts")

# Create the plot with the base map and add the points_sf layer 
plot1 <- ggplot() +
  geom_polygon(data = massachusetts_map, aes(x = long, y = lat, group = group), fill = "lightblue", color = "black") +
  geom_sf(data = points_sf, aes(geometry = geometry), color = "red", size = 3) +
  ggtitle("Map of Massachusetts with Points") +
  theme_minimal()
# Display the plot
print(plot1)

# https://jtr13.github.io/cc19/different-ways-of-plotting-u-s-map-in-r.html 

#===
#install.packages('ggmap')

library(ggmap)      # For creating heatmap (Optional)
library(MASS)       # For the kde2d function used in creating a heat map
# see also https://www.rdocumentation.org/packages/MASS/versions/7.3-64/topics/kde2d

# Create a heatmap of the points
heatmap_plot_with_legend <- ggplot() +
  geom_polygon(data = massachusetts_map, aes(x = long, y = lat, group = group), fill = "lightblue", color = "black") + 
  # Generate a density estimate of the point locations
  ggplot2::stat_density_2d(data = points, aes(x = longitude, y = latitude, fill = ..level..), 
                  geom = "polygon", alpha = 0.5) +  # Use polygon for fill
  geom_sf(data = points_sf, aes(geometry = geometry), color = "black", size = 0.5, alpha = 0.3) +
  ggtitle("Heatmap of Points in Massachusetts") +
  scale_fill_viridis_c(name = "Density Level") +  # Specify fill scale and legend title
  theme_minimal() +
  theme(legend.position = "right")  # Position the legend on the right side
# Display the heatmap
print(heatmap_plot_with_legend)

# ============
usstates_map <- ggplot2::map_data("state")
# Create the plot with the base map and add the points_sf layer 
plot1 <- ggplot() +
  geom_polygon(data = usstates_map, aes(x = long, y = lat, group = group), fill = "lightblue", color = "black") +
  geom_sf(data = points_sf, aes(geometry = geometry), color = "red", size = 3) +
  ggtitle("Map with Points") +
  theme_minimal()
# Display the plot
print(plot1)

# join data 
# https://r4ds.hadley.nz/joins.html



zipcode_lat_lon_lookup_df <- read.csv('zipcode_centroids.csv')
# Load the dplyr package
library(dplyr)

# Assuming zipcodes_df is your data frame with just zip codes
# and lookup_df is your lookup table with zipcodes, latitudes, and longitudes

# Perform a left join to add latitude and longitude to the zipcode data frame
# Note: Make sure the column names are correctly specified according to your data frames

# Create a new data frame with Massachusetts zip codes
massachusetts_zipcodes <- data.frame(zipcode = c("47435", "02115", "01890"))
head(massachusetts_zipcodes)

# Create a new field called 'zipcode' populated with values from the 'ZIP' field
zipcode_lat_lon_lookup_df <- zipcode_lat_lon_lookup_df %>%
  mutate(zipcode = ZCTA5CE20)
head(zipcode_lat_lon_lookup_df)

# Make sure both zipcode columns are of character type
zipcode_lat_lon_lookup_df$zipcode <- as.character(zipcode_lat_lon_lookup_df$zipcode)
head(zipcode_lat_lon_lookup_df)

# Perform the left join after ensuring compatible types
enriched_zipcodes_df <- massachusetts_zipcodes %>%
  left_join(zipcode_lat_lon_lookup_df, by = "zipcode")
head(enriched_zipcodes_df)


enriched_zipcodes_df <- massachusetts_zipcodes %>%
  left_join(zipcode_lat_lon_lookup_df, by = "zipcode")

head(enriched_zipcodes_df)


```
