---
title: "Data Wrangling with Tidyverse and Weather Data"
author: "Jeremy Mikecz"
format: html
editor: visual
---

# Data Wrangling with Tidyverse

## Using Local Weather Data

In this notebook, we will work with some time-series weather data.

When searching for local weather data, I found [*Climate Data Online*](https://www.ncei.noaa.gov/cdo-web/) found on NOAA's National Centers for Environmental Information website. I chose "Hanover", the type of data I wanted, and the date range (earliest to present). Next, I requested this data, and downloaded it from a link they sent me. Finally, I ran the following code to create a series of visualizations.

## 1. Import Necessary Packages

```{r}
# install.packages("tidyverse")
```

```{r}
library(tidyverse)
```

## 2. Load Data

To load a csv, adapt the following code:

```         
df <- read.csv("relative_path_to_csv.csv")
```

```{r}
df <- read.csv("data/Hanover_weather-data_1884-2025.csv")
```

## 3. Review Data

Review the dataset by:

1.  Examine the data in the **Environment** panel (usually in the top right of R Studio).

2.  Examine the data using the following commands:

    ```         
    head(df)
    dim(df)
    colnames(df)
    ```

```{r}
head(df)
```

```{r}
summary(df)
```

```{r}
dim(df)
```

```{r}
colnames(df)
```

```{r}

```

## 4. Examine Data: How can we track changes in local climate using this data?

```         
## insert notes below:




```

## 5. Normalize Dates and then separate day, month, and year

```{r}
library(lubridate)
```

```{r}
unique(guess_formats(df$DATE, orders = c("mdy", "dmy", "ymd", "bdY")))
```

```{r}
#date = "2025-05-20"
date = "5/20/2025"
parse_date_time("2025-05-20", orders = c("ymd", "mdy"))
```

Now, let's normalize the `DATE` column as some columns are in YYYY-MM-DD format and others are in M-D-YYYY. To create a new column based on the value of other columns we use the **mutate()** function.

```{r}

df <- df |>
  mutate(DATE2 = parse_date_time(DATE, orders = c("ymd", "mdy")))
```

```{r}
df <- df |> 
    select(STATION, NAME, DATE, DATE2, everything())
```

```         
```

Next, we can use the **separate** function to separate the year, month, and day values into separate columns.

```{r}
df<- df |>
  separate(DATE2, into = c("Year", "Month", "Day"), sep = "-|/", convert = TRUE)
  # to keep original DATE column use `remove=FALSE`
colnames(df)
```

```{r}
#no_tmax <- df |>
#  filter(is.na(TMAX))

#no_tmax[c(3000:3010),]
```

## 6. Select columns to keep, drop the rest

```{r}
df <- df |>
    select(NAME, Year, Month, Day, PRCP, SNOW, TMAX, TMIN)
```

```{r}
summary(df)
```

```{r}
df <- df |>
    drop_na(TMAX, TMIN)
```

```{r}
write.csv(temp_df, "data/Hanover_temps.csv")


```

## 7. Summarize by Year

```{r}
year_maxtempdf <- df |>
  group_by(Year) |>
  summarize(TMAX_yravg = mean(TMAX, na.rm = TRUE))
```

```{r}
year_mintempdf <- df |>
  group_by(Year) |>
  summarize(TMIN_yravg = mean(TMIN, na.rm = TRUE))
```

```{r}
head(year_maxtempdf)
```

To more easily create visualizations showing both yearly maximum temperature `TMAX_yravg` and yearly minimum temperature `TMIN_yravg` it would help to concatenate the two dataframes vertically (for a long dataframe). We can then store the temperature values for both in the same column and simply add a new column indicating whether the value is a maximum or minimum temperature.

```{r}
year_maxtempdf <- year_maxtempdf |>
    mutate(type = "maxtemp") |>
    mutate(T_yravg = TMAX_yravg)|>
    select(Year, T_yravg, type)


```

```{r}
year_mintempdf <- year_mintempdf |>
    mutate(type = "mintemp") |>
    mutate(T_yravg = TMIN_yravg)|>
    select(Year, T_yravg, type)
```

```{r}

year_tempdf <- rbind(year_maxtempdf, year_mintempdf) |>
    arrange(Year)
  
```

```{r}
write.csv(year_tempdf, "data/Hanover_temp-yearaverages.csv")
```

## 8. Compare daily temperatures to 20th century average

A. Filter to retrieve 20th century data only

```{r}
df20c <- temp_df |>
  filter(Year >= 1900 & Year <= 1999)
```

B. Calculate average 20th century max and min temperatures by Day and Month

```{r}
TMAX20c_df <- df20c |>
  group_by(Month, Day) |>
  summarize(Avg_TMAX_20c = mean(TMAX, na.rm = TRUE), .groups = 'drop')

TMIN20c_df <- df20c |>
  group_by(Month, Day) |>
  summarize(Avg_TMIN_20c = mean(TMIN, na.rm = TRUE), .groups = 'drop')
```

C. Merge average 20th century temperatures back into full dataset

```{r}
temp_df <- temp_df |>
  left_join(TMAX20c_df, by = c("Month", "Day")) |>
  left_join(TMIN20c_df, by = c("Month", "Day"))
```

D. Create new columns by calculating the difference of each daily min and max temp to the 20th century average.

```{r}
temp_df <- temp_df |>
    mutate(max_diff20c_avg = TMAX - Avg_TMAX_20c,
           min_diff20c_avg = TMIN - Avg_TMIN_20c)
```

E. Create a `daynum` column to record the number of day of the year, i.e. January 1 = 1 and December 31 = 365 (366 on leap years)

```{r}
temp_df <- temp_df |>
  filter(Year > 1893 & Year < 2025) |>  # 1893 missing first 5 months and #2025 missing last 9
  group_by(Year) |>
  mutate(daynum = row_number())
```

F. Write results to csv.

```{r}
write.csv(temp_df, "data/Hanover_temps2.csv")
```
